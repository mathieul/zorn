defmodule <%= module_name %>.Model.<%= subject_camelcase %> do
  use Ecto.Model

  import Ecto.Query, only: [from: 2]

  alias <%= module_name %>.Repo

  queryable "<%= subject %>" do
    field :name
    field :description
  end

  validatep validate_create(<%= subject %>),
           name: present(),
    description: present()

  def create(attrs) when is_list(attrs) do
    <%= subject %> =
      attributes_for_change(attrs)
      |> __MODULE__.new

    case validate_create(<%= subject %>) do
      [] ->
        do_create(<%= subject %>)
      errors ->
        {:errors, error_messages(errors)}
    end
  end

  defp attributes_for_change(attrs) do
    attrs
    |> Keyword.take([:name, :description])
    |> Keyword.put(:updated_at, now)
  end

  defp now do
    :erlang.now
    |> :calendar.now_to_universal_time
    |> Ecto.DateTime.from_erl
  end

  defp do_create(<%= subject %>) do
    try do
      {:ok, Repo.create(<%= subject %>)}
    rescue
      error ->
        {:errors, [inspect(error)]}
    end
  end

  defp error_messages(errors) do
    Enum.map(errors, fn {field, message} -> "#{field} #{message}" end)
  end

  def find(id) do
    case Repo.get(__MODULE__, id) do
      nil ->
        :not_found
      <%= subject %> ->
        {:ok, <%= subject %>}
    end
  end

  def all do
    query = from <%= String.slice(subject, 0..0) %> in __MODULE__,
            order_by: <%= String.slice(subject, 0..0) %>.name
    Repo.all(query)
  end
end

defimpl Zorn.Serializer, for: <%= module_name %>.Model.<%= subject_camelcase %>.Entity do
  def serialize(<%= subject %>),
    do: serialize(<%= subject %>, model_name(<%= subject %>))

  def serialize(<%= subject %>, root),
    do: [{root, serialize_attributes(<%= subject %>)}]

  defp serialize_attributes(<%= subject %>) do
    <%= subject %>.__entity__(:keywords)
    |> Dict.take([:id, :name, :description])
  end

  def model_name(_<%= subject %>),
    do: :<%= subject %>

  def collection_name(_<%= subject %>),
    do: :<%= subject %>
end
